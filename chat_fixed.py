# chat_fixed.py (revised)
import random
import json
import torch
from model import NeuralNet
from nltk_utils import tokenize, bag_of_words
import numpy as np
import sqlite3, datetime,os
from state_manager import StateManager




DB_PATH = "chat.db"
CONF_THRESHOLD = 0.60  # h·∫° t·∫°m ƒë·ªÉ d·ªÖ k√≠ch ho·∫°t intent khi data c√≤n m·ªèng
FAQ_DB_PATH = "D:/HTML/chat2/rag/faqs.db"   
LOG_ALL_QUESTIONS = True  



# --- K·∫øt n·ªëi & chu·∫©n b·ªã DB ---
conn = sqlite3.connect(DB_PATH)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS conversations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_message TEXT,
    bot_reply   TEXT,
    intent_tag  TEXT,
    confidence  REAL,
    time        TEXT
);
""")
conn.commit()


device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# ƒê·ªçc intents (ƒÉn BOM n·∫øu c√≥)
with open('intents.json', 'r', encoding='utf-8-sig') as f:
    intents = json.load(f)


# Load model ƒë√£ train
FILE = "data.pth"
data = torch.load(FILE, map_location=device)
def ensure_questions_log():
    os.makedirs(os.path.dirname(FAQ_DB_PATH), exist_ok=True)
    conn2 = sqlite3.connect(FAQ_DB_PATH)
    cur2 = conn2.cursor()
    cur2.execute("""
    CREATE TABLE IF NOT EXISTS questions_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question   TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        synced     INTEGER DEFAULT 0
    )
    """)
    conn2.commit(); conn2.close()

def log_question_for_notation(question: str):
    """Ghi 1 c√¢u h·ªèi v√†o 'inbox' ƒë·ªÉ push l√™n Notion sau n√†y (push_logs.py)."""
    if not question or not question.strip():
        return
    ensure_questions_log()
    conn2 = sqlite3.connect(FAQ_DB_PATH)
    cur2 = conn2.cursor()
    cur2.execute("INSERT INTO questions_log (question, synced) VALUES (?, 0)", (question.strip(),))
    conn2.commit(); conn2.close()
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

with open('intents.json', 'r', encoding='utf-8-sig') as f:
    intents = json.load(f)


input_size  = data["input_size"]
hidden_size = data["hidden_size"]
output_size = data["output_size"]
all_words   = data["all_words"]
tags        = data["tags"]
model_state = data["model_state"]

model = NeuralNet(input_size, hidden_size, output_size).to(device)
model.load_state_dict(model_state)   # n·∫°p tr·ªçng s·ªë
model.eval()

# State manager: c·ªë g·∫Øng d√πng flows.json n·∫øu c√≥
try:
    state_mgr = StateManager("flows.json")
except Exception:
    state_mgr = StateManager()



INTERRUPT_INTENTS = set()  # kh√¥ng ng·∫Øt flow b·∫±ng intent; ch·ªâ h·ªßy b·∫±ng CANCEL_WORDS
CANCEL_WORDS = {"h·ªßy","hu·ª∑","huy","cancel","tho√°t","d·ª´ng","ƒë·ªïi ch·ªß ƒë·ªÅ","doi chu de"}

print("ü§ñ Chatbot ƒë√£ s·∫µn s√†ng! G√µ 'quit' ƒë·ªÉ tho√°t.")

try:
    while True:
        sentence = input("B·∫°n: ").strip()
        if sentence.lower() == "quit":
            break

        # L·ªánh h·ªßy lu·ªìng th·ªß c√¥ng
        if sentence.lower() in CANCEL_WORDS:
            try:
                state_mgr.exit_flow()
            except Exception:
                pass
            reply = "ƒê√£ h·ªßy lu·ªìng hi·ªán t·∫°i. B·∫°n mu·ªën h·ªèi g√¨ ti·∫øp?"
            print("Bot:", reply)
            cur.execute(
                "INSERT INTO conversations(user_message, bot_reply, intent_tag, confidence, time) VALUES (?,?,?,?,?)",
                (sentence, reply, None, 0.0, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            conn.commit()
            continue

        # Kh·ªüi t·∫°o
        reply = None
        tag_to_log = None
        confidence = 0.0

        # --- NLU: d·ª± ƒëo√°n intent ---
        tokens = tokenize(sentence)
        X = bag_of_words(tokens, all_words)             # np.float32
        X = torch.from_numpy(X).unsqueeze(0).to(device) # (1, input_size)

        with torch.no_grad():
            output = model(X)                           # (1, num_classes)
            probs = torch.softmax(output, dim=1)
            prob, pred_idx = torch.max(probs, dim=1)
            tag = tags[pred_idx.item()]
            confidence = float(prob.item())

        # --- ∆ØU TI√äN NG·ªÆ C·∫¢NH ---
        # 0) N·∫øu ƒëang ·ªü trong flow: state manager x·ª≠ l√Ω TR∆Ø·ªöC
        if getattr(state_mgr, "active_flow", None):
            # Kh√¥ng t·ª± √Ω ng·∫Øt flow b·∫±ng intent; lu√¥n c·ªë g·∫Øng x·ª≠ l√Ω ti·∫øp ng·ªØ c·∫£nh
            try:
                ctx_reply = state_mgr.handle(tag, sentence)
            except Exception:
                    ctx_reply = None
            if ctx_reply:
                    reply = ctx_reply
                    tag_to_log = tag

        # 1) N·∫øu ch∆∞a c√≥ reply & model t·ª± tin: th·ª≠ KH·ªûI ƒê·ªòNG flow theo intent hi·ªán t·∫°i
        if reply is None and confidence > CONF_THRESHOLD:
            try:
                ctx_reply = state_mgr.handle(tag, sentence)
            except Exception:
                ctx_reply = None
            if ctx_reply:
                reply = ctx_reply
                tag_to_log = tag

        # 2) N·∫øu v·∫´n ch∆∞a c√≥ reply: th·ª≠ bootstrap theo t·ª´ kh√≥a trong flows.json
        if reply is None:
            try:
                boot = state_mgr.bootstrap_by_text(sentence)
            except Exception:
                boot = None
            if boot:
                reply = boot
                # c√≥ th·ªÉ ch∆∞a log intent v√¨ ch∆∞a ch·∫Øc ch·∫Øn

        # 3) N·∫øu v·∫´n ch∆∞a c√≥ -> d√πng responses theo intent (ch·ªâ khi ƒë·ªß t·ª± tin)
        if reply is None and confidence > CONF_THRESHOLD:
            resp_list = next((it["responses"] for it in intents["intents"] if it["tag"] == tag), None)
            if resp_list:
                reply = random.choice(resp_list)
                tag_to_log = tag

        # 4) Fallback cu·ªëi
        if reply is None:
            reply = "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu √Ω b·∫°n."

        print("Bot:", reply)

        # --- L∆∞u log ---
        cur.execute(
            "INSERT INTO conversations(user_message, bot_reply, intent_tag, confidence, time) VALUES (?,?,?,?,?)",
            (sentence, reply, tag_to_log, confidence, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()
    # GHI "INBOX C√ÇU H·ªéI" ƒê·ªÇ ƒê·∫®Y L√äN NOTION
        should_push_to_notion = (
            LOG_ALL_QUESTIONS or
            reply.strip().startswith("Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu") or
            confidence < CONF_THRESHOLD or
            tag_to_log is None
        )
        if should_push_to_notion:
            try:
                # ‚úÖ g·ªçi H√ÄM, kh√¥ng ph·∫£i g√°n bi·∫øn
                log_question_for_notation(f"User: {sentence}\nBot: {reply}")

            except Exception:
                pass

finally:
    conn.close()