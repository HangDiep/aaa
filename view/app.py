# view/app.py
from fastapi import FastAPI, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from starlette.responses import FileResponse
from pathlib import Path
import sys
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import os
app = FastAPI()
# Mount static folder
app.mount("/static", StaticFiles(directory="view"), name="static")


# Cho Python th·∫•y th∆∞ m·ª•c cha: D:\HTML\1234 (n∆°i c√≥ chat_fixed.py)
PROJECT_ROOT = Path(__file__).resolve().parents[1]
sys.path.append(str(PROJECT_ROOT))

from chat_fixed import process_message  # chat_fixed.py KH√îNG ƒë∆∞·ª£c import ch√≠nh n√≥

app = FastAPI(title="Library Chat API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], allow_credentials=True,
    allow_methods=["*"], allow_headers=["*"],
)

# ===== API =====
@app.get("/health")
def health():
    return {"status": "ok"}

@app.post("/chat")
def chat(message: str = Form(...)):
    return {"answer": process_message(message)}  # front-end ƒë·ªçc data.answer

# Stub demo (c√≥/kh√¥ng t√πy b·∫°n)
@app.get("/search")
def search(q: str):
    return [{"answer": "Gi·ªù m·ªü c·ª≠a: 7:30 - 17:00, Th·ª© 2‚ÄìTh·ª© 6."}]

@app.get("/inventory")
def inventory(book_name: str):
    return [{"name": book_name, "author": "N/A", "year": "?", "quantity": 3, "status": "available"}]

# ===== STATIC =====
STATIC_DIR = Path(__file__).resolve().parent   # ch√≠nh l√† th∆∞ m·ª•c view

# Serve c√°c file tƒ©nh (n·∫øu b·∫°n c√≥ JS/CSS ri√™ng). Kh√¥ng b·∫Øt route g·ªëc.
app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")

# üëâ Tr·∫£ tr·ª±c ti·∫øp file Chatbot.html ·ªü route "/"
@app.get("/", response_class=HTMLResponse)
def home():
    file_path = STATIC_DIR / "Chatbot.html"
    if not file_path.exists():
        return "<h1>‚ùå Kh√¥ng t√¨m th·∫•y Chatbot.html</h1>"
    with open(file_path, "r", encoding="utf-8") as f:
        return f.read()
    
@app.get("/ping")
def ping():
    return {"msg": "pong"}

